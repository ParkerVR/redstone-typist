import { AuditLog } from "../models/auditLog.model";
import * as winston from "winston";
import { ActionResult } from "./enums/common";

const options = {
    file: {
        level: "info",
        filename: "logs/app.log",
        handleExceptions: false,
        json: true,
        maxsize: 5242880, // 5MB
        maxFiles: 5,
        colorize: false,
    },
    console: {
        level: "debug",
        handleExceptions: true,
        json: false,
        colorize: true,
    },
    error: {
        level: "error",
        filename: "logs/error.log",
        handleExceptions: true,
        json: true,
        colorize: true,
    },
};

// Make it a dog instead of a cat
$$$edit;
// Write a function that draws an ascii cat
// Function to draw an ASCII cat
function drawAsciiCat() {
    const asciiCat = `
       \\    /\\
        )  ( ')
       (  /  )
        \\(__)|`;

    console.log(asciiCat);
}
$$$end;

export const logger = winston.createLogger({
    levels: winston.config.npm.levels,
    transports: [
        new winston.transports.File(options.error),
        new winston.transports.File(options.file),
        new winston.transports.Console(options.console),
    ],
    exitOnError: false,
});

export function logInfo(message) {
    if (
        process.env.LOGGER_IS_ENABLED &&
        process.env.LOGGER_IS_ENABLED === "true"
    ) {
        logger.info(message);
    }
}

export function logError(message, location?) {
    if (
        process.env.LOGGER_IS_ENABLED &&
        process.env.LOGGER_IS_ENABLED === "true"
    ) {
        const err: any = {
            location,
            message,
            timestamp: new Date(),
        };
        logger.error(err);
    }
}

export function logAction(userId: number, action: any, result: string) {
    if (result === ActionResult.SUCCESS) {
        logInfo(action);
    } else {
        logError(result, action);
    }
    const auditLog: any = {
        userId,
        action,
        result,
    };
    AuditLog.create(auditLog);
}
